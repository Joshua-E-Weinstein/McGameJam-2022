//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.2.0
//     from Assets/Scripts/Player Scripts/Player.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace McgillTeam3
{
    public partial class @Player : IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @Player()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""Player"",
    ""maps"": [
        {
            ""name"": ""CaveGameplay"",
            ""id"": ""4ad7b4ca-4250-41bf-bb75-e31a31718556"",
            ""actions"": [
                {
                    ""name"": ""Approach"",
                    ""type"": ""Value"",
                    ""id"": ""77c9009f-828d-4364-abc4-781feefe87c5"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""9a4bb543-cf37-4e08-8d8f-85c3877b90d8"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse+Keyboard"",
                    ""action"": ""Approach"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Mouse+Keyboard"",
            ""bindingGroup"": ""Mouse+Keyboard"",
            ""devices"": [
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
            // CaveGameplay
            m_CaveGameplay = asset.FindActionMap("CaveGameplay", throwIfNotFound: true);
            m_CaveGameplay_Approach = m_CaveGameplay.FindAction("Approach", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }
        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }
        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // CaveGameplay
        private readonly InputActionMap m_CaveGameplay;
        private ICaveGameplayActions m_CaveGameplayActionsCallbackInterface;
        private readonly InputAction m_CaveGameplay_Approach;
        public struct CaveGameplayActions
        {
            private @Player m_Wrapper;
            public CaveGameplayActions(@Player wrapper) { m_Wrapper = wrapper; }
            public InputAction @Approach => m_Wrapper.m_CaveGameplay_Approach;
            public InputActionMap Get() { return m_Wrapper.m_CaveGameplay; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(CaveGameplayActions set) { return set.Get(); }
            public void SetCallbacks(ICaveGameplayActions instance)
            {
                if (m_Wrapper.m_CaveGameplayActionsCallbackInterface != null)
                {
                    @Approach.started -= m_Wrapper.m_CaveGameplayActionsCallbackInterface.OnApproach;
                    @Approach.performed -= m_Wrapper.m_CaveGameplayActionsCallbackInterface.OnApproach;
                    @Approach.canceled -= m_Wrapper.m_CaveGameplayActionsCallbackInterface.OnApproach;
                }
                m_Wrapper.m_CaveGameplayActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @Approach.started += instance.OnApproach;
                    @Approach.performed += instance.OnApproach;
                    @Approach.canceled += instance.OnApproach;
                }
            }
        }
        public CaveGameplayActions @CaveGameplay => new CaveGameplayActions(this);
        private int m_MouseKeyboardSchemeIndex = -1;
        public InputControlScheme MouseKeyboardScheme
        {
            get
            {
                if (m_MouseKeyboardSchemeIndex == -1) m_MouseKeyboardSchemeIndex = asset.FindControlSchemeIndex("Mouse+Keyboard");
                return asset.controlSchemes[m_MouseKeyboardSchemeIndex];
            }
        }
        public interface ICaveGameplayActions
        {
            void OnApproach(InputAction.CallbackContext context);
        }
    }
}
